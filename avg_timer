#!/usr/bin/env escript

main([M,F,A,N]) ->
    Num = list_to_integer(N),
    Mod = list_to_atom(M),
    Fun = list_to_atom(F),
    Args = list_to_term(A),
    {First_Time, Length, Min, Max, Med, Avg} = test_avg(Mod, Fun, Args, Num),
    io:format("First Iteration: ~b mics~n"
            "--- Result of ~b iterations ---"
            "Range: ~b - ~b mics~n"
            "Median: ~b mics~n"
            "Average: ~b mics~n",
            [First_Time, Length, Min, Max, Med, Avg]);

main([F,A,N]) ->
    Num = list_to_integer(N),
    Fun = list_to_atom(F),
    Args = list_to_term(A),
    {First_Time, Length, Min, Max, Med, Avg} = test_avg(Fun, Args, Num),
    io:format("First Iteration: ~b mics~n"
            "--- Result of ~b iterations ---"
            "Range: ~b - ~b mics~n"
            "Median: ~b mics~n"
            "Average: ~b mics~n",
            [First_Time, Length, Min, Max, Med, Avg]);
main(_) ->
    io:format("Usage: args - Mod, Fun, Args, N | Fun, Args, N~n").

test_avg(M, F, A, N) when N > 0 ->
    L = test_loop(M, F, A, N, []),
    test_avg2(L).

test_avg(F, A, N) when N > 0 ->
    L = test_loop(F, A, N, []),
    test_avg2(L).

test_avg2([First_Time]) ->
    io:format("First Iteration: ~b mics~n", [First_Time]),
    First_Time;
test_avg2(L) ->
    [First_Time|Rest] = L,
    Length = length(Rest),
    Min = lists:min(Rest),
    Max = lists:max(Rest),
    Med = lists:nth(round((Length / 2)), lists:sort(Rest)),
    Avg = round(lists:foldl(fun(X, Sum) -> X + Sum end, 0, Rest) / Length),
    {First_Time, Length, Min, Max, Med, Avg}.

test_loop(_M, _F, _A, 0, List) ->
    List;
test_loop(M, F, A, N, List) ->
    {T, _Result} = timer:tc(M, F, A),
    test_loop(M, F, A, N - 1, [T|List]).

test_loop(_F, _A, 0, List) ->
        List;
test_loop(F, A, N, List) ->
    {T, _Result} = timer:tc(F, A),
    test_loop(F, A, N - 1, [T|List]).

list_to_term(String) ->
    {ok, T, _} = erl_scan:string(String++"."),
    case erl_parse:parse_term(T) of
        {ok, Term} ->
            Term;
        {error, Error} ->
            Error
    end.
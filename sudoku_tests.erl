-module(sudoku_tests).
-include_lib("eunit/include/eunit.hrl").

sudoku_test_() ->
     [test_them_values()].

test_them_values() ->
    [
        ?_assertEqual(81, length(sudoku_serv:squares())),
        ?_assertEqual(27, length(sudoku_serv:unitlist())),
        ?_assertEqual([["A2", "B2", "C2", "D2", "E2", "F2", "G2", "H2", "I2"],
                            ["C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9"],
                            ["A1", "A2", "A3", "B1", "B2", "B3", "C1", "C2", "C3"]],
                            maps:get("C2", sudoku_serv:units())),

        ?_assertEqual(["A1", "A2", "A3", "B1", "B2", "B3", "C1", "C3",
                            "C4", "C5", "C6", "C7", "C8", "C9", "D2", "E2",
                            "F2", "G2", "H2", "I2"],
                            maps:get("C2", sudoku_serv:peers())),

        ?_assert(lists:all(fun(X) -> Units = sudoku_serv:units(),
                                        UnitsOfX = maps:get(X, Units),
                                        length(UnitsOfX) =:= 3 end, sudoku_serv:squares())),
        ?_assert(lists:all(fun(X) -> Peers = sudoku_serv:peers(),
                                        PeersOfX = maps:get(X, Peers),
                                        length(PeersOfX) =:= 20 end, sudoku_serv:squares())),
        ?_assertEqual(maps:from_list([{"A1","4"},{"A2","1679"},{"A3","12679"},{"A4","139"},{"A5","2369"},{"A6","269"},{"A7","8"},{"A8","1239"},{"A9","5"},
                            {"B1","26789"},{"B2","3"},{"B3","1256789"},{"B4","14589"},{"B5","24569"},{"B6","245689"},{"B7","12679"},{"B8","1249"},{"B9","124679"},
                            {"C1","2689"},{"C2","15689"},{"C3","125689"},{"C4","7"},{"C5","234569"},{"C6","245689"},{"C7","12369"},{"C8","12349"},{"C9","123469"},
                            {"D1","3789"},{"D2","2"},{"D3","15789"},{"D4","3459"},{"D5","34579"},{"D6","4579"},{"D7","13579"},{"D8","6"},{"D9","13789"},
                            {"E1","3679"},{"E2","15679"},{"E3","15679"},{"E4","359"},{"E5","8"},{"E6","25679"},{"E7","4"},{"E8","12359"},{"E9","12379"},
                            {"F1","36789"},{"F2","4"},{"F3","56789"},{"F4","359"},{"F5","1"},{"F6","25679"},{"F7","23579"},{"F8","23589"},{"F9","23789"},
                            {"G1","289"},{"G2","89"},{"G3","289"},{"G4","6"},{"G5","459"},{"G6","3"},{"G7","1259"},{"G8","7"},{"G9","12489"},
                            {"H1","5"},{"H2","6789"},{"H3","3"},{"H4","2"},{"H5","479"},{"H6","1"},{"H7","69"},{"H8","489"},{"H9","4689"},
                            {"I1","1"},{"I2","6789"},{"I3","4"},{"I4","589"},{"I5","579"},{"I6","5789"},{"I7","23569"},{"I8","23589"},{"I9","23689"}]),
                            sudoku_serv:parse_grid(sudoku_serv:convert_to_grid("400000805030000000000700000020000060000080400000010000000603070500200000104000000"))),
        ?_assertEqual(maps:from_list([{"A1","4"},{"A2","1"},{"A3","7"},{"A4","3"},{"A5","6"},{"A6","9"},{"A7","8"},{"A8","2"},{"A9","5"},
                            {"B1","6"},{"B2","3"},{"B3","2"},{"B4","1"},{"B5","5"},{"B6","8"},{"B7","9"},{"B8","4"},{"B9","7"},
                            {"C1","9"},{"C2","5"},{"C3","8"},{"C4","7"},{"C5","2"},{"C6","4"},{"C7","3"},{"C8","1"},{"C9","6"},
                            {"D1","8"},{"D2","2"},{"D3","5"},{"D4","4"},{"D5","3"},{"D6","7"},{"D7","1"},{"D8","6"},{"D9","9"},
                            {"E1","7"},{"E2","9"},{"E3","1"},{"E4","5"},{"E5","8"},{"E6","6"},{"E7","4"},{"E8","3"},{"E9","2"},
                            {"F1","3"},{"F2","4"},{"F3","6"},{"F4","9"},{"F5","1"},{"F6","2"},{"F7","7"},{"F8","5"},{"F9","8"},
                            {"G1","2"},{"G2","8"},{"G3","9"},{"G4","6"},{"G5","4"},{"G6","3"},{"G7","5"},{"G8","7"},{"G9","1"},
                            {"H1","5"},{"H2","7"},{"H3","3"},{"H4","2"},{"H5","9"},{"H6","1"},{"H7","6"},{"H8","8"},{"H9","4"},
                            {"I1","1"},{"I2","6"},{"I3","4"},{"I4","8"},{"I5","7"},{"I6","5"},{"I7","2"},{"I8","9"},{"I9","3"}]),
                            sudoku_serv:solve(sudoku_serv:convert_to_grid("400000805030000000000700000020000060000080400000010000000603070500200000104000000")))
    ].
